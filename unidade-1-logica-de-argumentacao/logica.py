def treinar_negacao():
    """O usuÃ¡rio digita uma proposiÃ§Ã£o e sua negaÃ§Ã£o. O programa verifica se a resposta estÃ¡ correta."""

    negacao = {
        "p": "Â¬p",
        "Â¬p": "p",
        "pâˆ§q": "Â¬pvÂ¬q",
        "p^q": "Â¬pvÂ¬q",
        "pvq": "Â¬pâˆ§Â¬q",
        "p->q": "pâˆ§Â¬q",
        "p->q": "p^Â¬q",
        "p<->q": "(pâˆ§Â¬q) v (Â¬pvq)"
    }

    while True:
        proposicao = input("\nProposiÃ§Ã£o (ex: p -> q): ").strip().lower().replace(" ", "")
        negacao_proposicao = input("Digite a negaÃ§Ã£o: ").strip().lower().replace(" ", "")    

        if proposicao in negacao:
            if negacao[proposicao] == negacao_proposicao:
                print("\nAcertou! ParabÃ©ns! ðŸŽ‰")
                   
                    
            else:
                print("\nErrou! Tente novamente. ðŸ˜Š")
                print(f"Resposta correta: {negacao[proposicao]}")  


            while True:
                print("\n1 - tentar novamente")
                print("2 - sair")
                resposta = input("Digite uma das opÃ§Ãµes acima: ")

                if resposta == "1":
                    break
                elif resposta == "2":
                    return
                else:
                    print("Selecione uma opÃ§Ã£o vÃ¡lida!")
                
        else:
            print("Digite uma proposiÃ§Ã£o vÃ¡lida!")


def modo_programador():
    """Recebe uma proposiÃ§Ã£o lÃ³gica e mostra sua equivalÃªncia e como seria escrita em Python."""

    traducao = {
        "pâˆ§q": "p and q",
        "p^q": "p and q",
        "pvq": "p or q",
        "p->q": "not p or q",
        "p<->q": "p == q"
    }
      
    equivalencias = {
        "p->q": "Â¬p v q",
        "pâˆ§q": "Â¬(Â¬p v Â¬q)",
        "p^q": "Â¬(Â¬p v Â¬q)",  
        "pvq": "Â¬(Â¬p âˆ§ Â¬q)", 
        "p<->q": "(p âˆ§ q) v (Â¬p âˆ§ Â¬q)"
    }


    print("\nExemplos aceitos: p âˆ§ q, p ^ q, p v q, p -> q, p <-> q")
    proposicao = input("\nDigite a proposiÃ§Ã£o: ").strip().lower().replace(" ", "")

    if proposicao in traducao:
        print(f"\nPython: {traducao[proposicao]}")
        print(f"EquivalÃªncia: {equivalencias[proposicao]}")
    else:
        print("ProposiÃ§Ã£o invÃ¡lida.")
      

def quiz():
    import random

    equivalencia = { 
    "p -> q": "Â¬pvq",
    "p âˆ§ q": "Â¬(Â¬pvÂ¬q)",
    "p ^ q": "Â¬(Â¬pvÂ¬q)",  
    "p v q": "Â¬(Â¬pâˆ§Â¬q)", 
    "p <-> q": "(pâˆ§q) v (Â¬pâˆ§Â¬q)",
    "Â¬p v q": "p->q",
    "Â¬(Â¬p v Â¬q)": "pâˆ§q",
    "Â¬(Â¬p âˆ§ Â¬q)": "pvq",
    "(p âˆ§ q) v (Â¬p âˆ§ Â¬q)": "p<->q"
    }

    negacao = {
    "p": "Â¬p",
    "Â¬p": "p",
    "p âˆ§ q": "Â¬pvÂ¬q",
    "p v q": "Â¬pâˆ§Â¬q",
    "p v q": "Â¬p^Â¬q",
    "p -> q": "pâˆ§Â¬q",
    "p <-> q": "(pâˆ§Â¬q)v(Â¬pvq)"
    }

    nome_conectivo = {
        "p âˆ§ q": "conjunÃ§Ã£o",
        "p v q": "disjunÃ§Ã£o",
        "p -> q": "implicaÃ§Ã£o",
        "p <-> q": "bicondicional"
    }

    pontuacao = 0
    print("\n" + "*" * 30)
    print("        QUIZ DE LÃ“GICA")
    print("*" * 30)

    while True:

        negacao_aleatoria = random.choice(list(negacao.keys()))
        equiv_aleatoria = random.choice(list(equivalencia.keys())) 
        conectivo_aleatorio = random.choice(list(nome_conectivo.keys())) 

        resp_equivalencia = input(f"\nDigite a equivalÃªncia lÃ³gica de {equiv_aleatoria}: \n").strip().lower() 

        if resp_equivalencia.replace(" ", "") == equivalencia[equiv_aleatoria].replace(" ", ""):
            print("\nAcertou! ParabÃ©ns! ðŸŽ‰")
            pontuacao += 1
        else:
            print("\nErrou! Tente novamente. ðŸ˜Š")
            print(f"Resposta correta: {equivalencia[equiv_aleatoria]}")


        resp_negacao = input(f"\nDigite a negaÃ§Ã£o da proposiÃ§Ã£o {negacao_aleatoria}: \n")
        if resp_negacao.replace(" ", "") == negacao[negacao_aleatoria].replace(" ", ""): 
            print("Acertou! ParabÃ©ns! ðŸŽ‰")

            pontuacao += 1
        else:
            print("\nErrou! Tente novamente. ðŸ˜Š")
            print(f"Resposta correta: {negacao[negacao_aleatoria]}")


        resp_conectivo = input(f"\nDigite o conectivo correspondente do sÃ­mbolo '{conectivo_aleatorio}': \n")

        if resp_conectivo.replace(" ", "") == nome_conectivo[conectivo_aleatorio].replace(" ", ""):
            print("Acertou! ParabÃ©ns! ðŸŽ‰")
            pontuacao += 1
        else:
            print("\nErrou! Tente novamente. ðŸ˜Š") 
            print(f"Resposta correta: {nome_conectivo[conectivo_aleatorio]}")

        while True:
            opcao = input("\nContinuar jogando (s/n): ").lower() 
            if opcao == "n":
                print(f"\nVocÃª fez {pontuacao} pontos!")
                return
            elif opcao == "s":
                break
            else:
                print("Digite uma opÃ§Ã£o vÃ¡lida!")
                continue


def tabela_verdade():
    pass


def menu():
    """Exibe um menu com opÃ§Ãµes para as funÃ§Ãµes do programa"""

    while True:
        print("\n" + "*" * 35)
        print("             MENU")
        print("*" * 35) 
        print("\n1 - Treinar negaÃ§Ã£o de proposiÃ§Ãµes")
        print("2 - Modo programador")
        print("3 - Quiz de lÃ³gica")
        print("4 - Gerar tabela verdade (em breve!)")
        print("0 - Sair")

        opcao = input("\nDigite uma opÃ§Ã£o: ")

        if opcao == "1":
            treinar_negacao()
        elif opcao == "2":
            modo_programador()
        elif opcao == "3":
            quiz()
        elif opcao == "4":
            tabela_verdade()
        elif opcao == "0":
            print("Saindo do programa...")
            break
        else:
            print("OpÃ§Ã£o invÃ¡lida!")
        


menu()
